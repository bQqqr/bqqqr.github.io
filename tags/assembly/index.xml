<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>assembly on Christos Kaltsas's Webpage</title><link>https://bqqqr.github.io/tags/assembly/</link><description>Recent content in assembly on Christos Kaltsas's Webpage</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 08 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://bqqqr.github.io/tags/assembly/index.xml" rel="self" type="application/rss+xml"/><item><title>A Guide To MIPS</title><link>https://bqqqr.github.io/posts/guide-to-mips/</link><pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate><guid>https://bqqqr.github.io/posts/guide-to-mips/</guid><description>ðŸ¤– MIPS ðŸ‘œ Registers Registers have the following usage conventions:
When a register is designated as &amp;ldquo;preserved across calls&amp;rdquo;, it means that the caller can count on the register having the same contents before and after a subprogram call. If the subprogram uses one of these registers, it should take measures to save the register value before changing it and restore the value before returning. If a register is designated as &amp;ldquo;not preserved across calls&amp;rdquo;, it means that the caller cannot count on the register having the same contents before and after a subprogram call.</description></item></channel></rss>